var searchIndex = JSON.parse('{\
"rdsync":{"doc":"","t":"AAAAFAAAAADDMFLLLLAAFMFFLLLFFLLMFMFLLLLLLLLFDDLLLLLMMMLFLLLLLLLMMMLMLMLLLLLLLLLDDENNMLLLLLLMMLLLLLLLLLLMMFLLLLLLLLLLLLMFAFFFFFAAAFFFFFFFFFFFFDDMFLLLLALLLFLLLAAFFALLLLLLLLMFDRMLLLLMFLLFLMMMLLLLLDMFLLFFLFLLFLMLLLLMLFFFFADRLLLLLLLLLLLLLLLFFHLLLLLLLLLLLLLLLLLLLLMLLLLLLLLMLLMLLLFAAAADMFLLLLLAFLLALLAFFFDDMLLLLLLLMLLLLLMLLLLLMMLLLLLLLLLFFFHF","n":["cache","config","db","http","main","protos","rdsync","tests","tx_pool","types","CACHE","CacheKey","__private_field","add","borrow","borrow","borrow_mut","borrow_mut","cache_db","cache_table","clear","db","delete","delete_table","deref","from","from","from_cache_string","get","into","into","key","keys","table","to_cache_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","delete_db","Cache","TimeCache","borrow","borrow","borrow_mut","borrow_mut","clear","current_data_size","data","data_length","delete","expand_cache","from","from","get","insert","into","into","keys","last_accessed","latest_time","max_data_size","new","newest_time","safe_time_insert","time_data","try_from","try_from","try_into","try_into","type_id","type_id","update_last_accessed","vzip","vzip","CONFIG","Config","ConfigError","IoError","TomlError","__private_field","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cache_size","db_path","default","deref","fmt","fmt","from","from","from","into","into","into","ip","port","read_config","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","workers_count","create_db","db","get_db","init","init_dir","is_db_exist","is_dir_exist","json_filter","row","table","delete","apply_filter","filter","add_row","delete_row","is_row_exist","read_row","create_table","delete_table","get_table","get_table_with_keys","is_table_exist","CLIENTS","Clients","__private_field","add_stream","borrow","borrow","borrow_mut","borrow_mut","db_methods","deref","from","from","handle_client","into","into","new","receiver","row_methods","send","start","table_methods","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","writable","delete","RequestHeaders","SECTIONS_IN_TX","_type","borrow","borrow_mut","clone","clone_into","db","deserialize","fmt","from","get_header","into","key","rud","table","to_owned","try_from","try_into","type_id","vzip","Bunch","_type","add","borrow","borrow_mut","bunch","delete","deserialize","filter","fmt","from","get","into","key","serialize","try_from","try_into","type_id","value","vzip","create","delete","get","get_with_keys","row","Row","_PROTOBUF_VERSION_CHECK","borrow","borrow_mut","clear","clear_type_","clear_value","clone","clone_into","compute_size","compute_size_dyn","default","default","default_instance","descriptor","descriptor_dyn","eq","file_descriptor","file_descriptor_proto","file_descriptor_proto_data","fmt","fmt","from","generated_message_descriptor_data","has_type","has_value","into","is_initialized","is_initialized_dyn","merge_from","merge_from_dyn","mut_special_fields","mut_special_fields_dyn","mut_type","mut_value","new","new","set_type","set_value","special_fields","special_fields","special_fields_dyn","take_type_","take_value","to_owned","to_string","try_from","try_into","type_","type_","type_id","value","value","vzip","write_to_with_cached_sizes","write_to_with_cached_sizes_dyn","init","cache_test","db_test","row_test","table_test","POOL","__private_field","add_tx","borrow","borrow_mut","deref","from","into","req_handler","start","try_from","try_into","tx_table","type_id","vzip","worker","worker","wsleep","handle_request","TX","TxPool","body","borrow","borrow","borrow_mut","borrow_mut","clear","clone","clone_into","data","delete","fmt","from","from","get_one","head","insert","into","into","keys","new","req","to","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","delete_latest_tx","get_latest_tx","is_pool_empty","TYPES","is_valid_data"],"q":[[0,"rdsync"],[10,"rdsync::cache"],[43,"rdsync::cache::cache_db"],[44,"rdsync::cache::cache_table"],[79,"rdsync::config"],[119,"rdsync::db"],[129,"rdsync::db::db"],[130,"rdsync::db::json_filter"],[132,"rdsync::db::row"],[136,"rdsync::db::table"],[141,"rdsync::http"],[171,"rdsync::http::db_methods"],[172,"rdsync::http::receiver"],[193,"rdsync::http::row_methods"],[213,"rdsync::http::table_methods"],[217,"rdsync::protos"],[218,"rdsync::protos::row"],[274,"rdsync::rdsync"],[275,"rdsync::tests"],[277,"rdsync::tests::db_test"],[279,"rdsync::tx_pool"],[297,"rdsync::tx_pool::req_handler"],[298,"rdsync::tx_pool::tx_table"],[331,"rdsync::tx_pool::worker"],[334,"rdsync::types"],[336,"alloc::string"],[337,"core::result"],[338,"std::sync::mutex"],[339,"alloc::vec"],[340,"core::any"],[341,"core::option"],[342,"core::fmt"],[343,"core::fmt"],[344,"serde_json::map"],[345,"std::net::tcp"],[346,"serde::de"],[347,"serde::ser"],[348,"protobuf::reflect::message"],[349,"protobuf::reflect::file"],[350,"protobuf::descriptor"],[351,"protobuf::reflect::message::generated"],[352,"protobuf::coded_input_stream"],[353,"protobuf::error"],[354,"protobuf::error"],[355,"protobuf::coded_output_stream"]],"d":["Caching module","Database startup configuration module","Database file operations module.","Asynchronous transaction pipeline server.","","Protocol Buffers generated Row structure","","","","","Global cache instance","Cache lookup key","","Adds a new row to the cache table and the file database.","","","","","","","Clears all entries from the cache.","Database name","Deletes a row from the cache and the file database.","Deletes a table and its associated entries from both the …","","Returns the argument unchanged.","Returns the argument unchanged.","Converts a cache key string into separate components …","Retrieves a row from the cache table or the file database …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Row key","Retrieves a vector of all keys currently present in the …","Table name","Converts the database name, table name, and key into a …","","","","","","","","","Deletes a database and its associated entries from both …","Represents a cache storing rows and associated time …","Represents time-related metadata for entries in the cache.","","","","","Clears all entries from the cache.","Current size of the cached data.","HashMap storing rows with cache keys as the identifier.","Length of the data associated with the cache entry.","Deletes a cache entry based on the provided key, reducing …","Expands the cache by removing the entry with the lowest …","Returns the argument unchanged.","Returns the argument unchanged.","Retrieves a row from the cache based on the provided cache …","Inserts a new entry into the cache with the provided cache …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Retrieves a vector containing all cache keys.","Timestamp of the last access to the cache entry in …","Timestamp of the latest access in microseconds since the …","Maximum size limit for the total data size in the cache …","Creates a new cache with a specified size limit in …","Timestamp of the newest access in microseconds since the …","Safely inserts time-related metadata into the cache, …","HashMap storing time-related metadata for cache entries.","","","","","","","Updates the last accessed time for a cache entry based on …","","","Global application configuration","","Enum to handle configuration-related errors","IO error","TOML parsing error","","","","","","","","Cache size (in MB)","Database path","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Server IP address","Server port","Function to read the configuration from a TOML file","","","","","","","","","","","","","Thread pool size","Creates a new database with the specified name.","Module for database operations.","Retrieves a list of rows within a specified database.","Initializes the database directory based on the configured …","Initializes a directory at the specified path if it does …","Checks if a database exists with the specified name.","Checks if a directory exists at the specified path.","Module for filtering json data in row JSON Data filter","Module for database row operations.","","Deletes a database and its associated directory from the …","","","Adds a new row to a specified database table.","Deletes a specified row from a database table.","Checks if a specified row exists in a database table.","Reads the data of a specified row from a database table.","Creates a new table within a specified database.","Deletes a specified table from a database.","Retrieves a list of keys representing rows in a specified …","Retrieves data for all rows in a specified database table …","Checks if a specified table exists within a database.","Global CLIENTS instance.","A structure representing the clients connected to the …","","Adds a new TcpStream to the Clients structure and returns …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Handles the communication with a connected client, …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new Clients instance.","Module for deserializing TCP stream data.","","Sends a message to a specific client identified by the …","Starts the asynchronous transaction pipeline server, …","","","","","","","","","","Open writeable streams for each client.","Deletes a database based on the information provided in …","Represents the headers of a request.","Number of sections expected in the transmission.","Type of value data.","","","","","Database name.","Deserializes a <code>TcpStream</code> into header and body string …","","Returns the argument unchanged.","Parses a header string into a request type and …","Calls <code>U::from(self)</code>.","Record key.","Request flag.","Table name.","","","","","","Represents a key-value pair with type of one value.","","Adds a new key-value pair to the specified table and …","","","Adds a bunch of key-value pairs to the specified table and …","Deletes the specified key-value pair from the given table …","","","","Returns the argument unchanged.","Retrieves the value associated with the specified key in …","Calls <code>U::from(self)</code>.","","","","","","","","Creates a new table in the specified database.","Deletes the specified table from the given database.","Retrieves all keys in the specified table and database.","Retrieves all keys along with their values and types in …","Generated file from <code>row.proto</code>","","Generated files are compatible only with the same version …","","","","","","","","","","","","","","","","<code>FileDescriptor</code> object which allows dynamic access to files","<code>FileDescriptorProto</code> object which was a source for this …","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A global Mutex-protected singleton instance of <code>TxPool</code> for …","","Adds a new transaction to the transaction pool.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Starts the worker threads for processing transactions.","","","","","","","Worker function that processes transactions from the …","Sleeps the current thread for one second.","Handles incoming requests based on the provided path.","Represents a transaction (TX) with request details.","A pool of transactions (TX) organized as a HashMap.","The request body.","","","","","Clears all transactions from the pool.","","","The internal data structure holding transactions.","Deletes a transaction from the pool based on its key.","","Returns the argument unchanged.","Returns the argument unchanged.","Retrieves the latest transaction and its key.","The request headers.","Inserts a new transaction into the pool.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Retrieves all keys in the pool.","Creates a new <code>TxPool</code> instance.","The raw request data.","The destination of the transaction (session id).","","","","","","","","","","Deletes the latest transaction from the pool based on its …","Retrieves the latest transaction from the pool.","Checks if the transaction pool is empty.","Array of valid data types.","Checks if the provided data is valid for a given data type."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,6,0,9,6,9,6,0,0,0,9,0,0,6,9,6,0,0,9,6,9,0,9,0,9,6,9,6,9,6,9,6,0,0,0,15,7,15,7,7,7,7,15,7,0,15,7,7,7,15,7,7,15,7,7,7,7,7,7,15,7,15,7,15,7,7,15,7,0,0,0,20,20,17,16,20,17,16,20,17,16,16,16,17,16,20,16,20,17,16,20,17,16,16,0,16,20,17,16,20,17,16,20,17,16,20,17,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,26,25,26,25,0,25,26,25,0,26,25,26,0,0,0,0,0,26,25,26,25,26,25,26,25,26,0,0,0,27,27,27,27,27,27,0,27,27,0,27,27,27,27,27,27,27,27,27,0,23,0,23,23,0,0,23,0,23,23,0,23,23,23,23,23,23,23,23,0,0,0,0,0,0,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,40,0,40,40,40,40,40,0,0,40,40,0,40,40,0,0,0,0,0,0,42,41,42,41,42,41,42,42,41,41,42,41,42,41,42,41,41,42,41,41,42,42,42,41,42,41,42,41,42,41,42,0,0,0,0,0],"f":[0,0,0,0,[[],1],0,0,0,0,0,0,0,0,[[2,2,2,2,2],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[],1],0,[[2,2,2],[[5,[4,4]]]],[[2,2],3],[6,[[8,[7]]]],[-1,-1,[]],[-1,-1,[]],[4,9],[[2,2,2],[[5,[10,4]]]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[],[[11,[4]]]],0,[[2,2,2],4],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,[[5,[4,4]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,1],0,0,0,[[7,2],1],[7,1],[-1,-1,[]],[-1,-1,[]],[[7,2],[[13,[10]]]],[[7,4,10],1],[-1,-2,[],[]],[-1,-2,[],[]],[7,[[11,[4]]]],0,0,0,[14,7],0,[[7,2,15],1],0,[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[[7,2],1],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[],16],[17,16],[[16,18],19],[[20,18],19],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[],[[5,[16,20]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[2,3],0,[[2,2],[[5,[[11,[4]],4]]]],[[],3],[2,3],[2,3],[2,3],0,0,0,[2,[[5,[4,4]]]],[[[22,[4,21]],[22,[4,21]]],3],[[2,2,2],[[5,[[11,[23]],4]]]],[[2,2,2,10],3],[[2,2,2],3],[[2,2,2],[[5,[1,4]]]],[[2,2,2],[[5,[10,4]]]],[[2,2],3],[[2,2],3],[[2,2],[[5,[[11,[4]],4]]]],[[2,2],[[5,[[11,[23]],4]]]],[[2,2],3],0,0,0,[24,4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[25,[[8,[26]]]],[-1,-1,[]],[-1,-1,[]],[24,1],[-1,-2,[],[]],[-1,-2,[],[]],[[],26],0,0,[[2,2,2],1],[[],1],0,[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[27,[[5,[4,4]]]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[27,27],[[-1,-2],1,[],[]],0,[[24,2],[[5,[[1,[4,4]],4]]]],[[27,18],19],[-1,-1,[]],[4,[[1,[4,27]]]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,12,[]],[-1,-2,[],[]],0,0,[[27,2],[[5,[4,4]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[27,2],[[5,[4,4]]]],[27,[[5,[4,4]]]],[-1,[[5,[23]]],28],[[27,2],[[5,[4,4]]]],[[23,18],19],[-1,-1,[]],[27,[[5,[4,4]]]],[-1,-2,[],[]],0,[[23,-1],5,29],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,12,[]],0,[-1,-2,[],[]],[27,[[5,[4,4]]]],[27,[[5,[4,4]]]],[27,[[5,[4,4]]]],[27,[[5,[4,4]]]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[10,1],[10,1],[10,1],[10,10],[[-1,-2],1,[],[]],[10,30],[-1,30,[]],[[],10],[[],10],[[],10],[[],31],[-1,31,[]],[[10,10],3],[[],32],[[],33],0,[[10,18],19],[[10,18],19],[-1,-1,[]],[[],34],[10,3],[10,3],[-1,-2,[],[]],[10,3],[-1,3,[]],[[10,35],[[36,[1]]]],[[-1,35],[[5,[1,37]]],[]],[10,38],[-1,38,[]],[10,4],[10,4],[[],10],[[],10],[[10,4],1],[[10,4],1],[10,38],0,[-1,38,[]],[10,4],[10,4],[-1,-2,[],[]],[-1,4,[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[10,2],0,[-1,12,[]],[10,2],0,[-1,-2,[],[]],[[10,39],[[36,[1]]]],[[-1,39],[[5,[1,37]]],[]],[[],1],0,0,0,0,0,0,[[2,27,2,2],1],[-1,-2,[],[]],[-1,-2,[],[]],[40,[[8,[41]]]],[-1,-1,[]],[-1,-2,[],[]],0,[[],1],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],0,[-1,12,[]],[-1,-2,[],[]],0,[[],1],[[],1],[[2,27,2],[[5,[4,4]]]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[41,1],[42,42],[[-1,-2],1,[],[]],0,[[41,2],1],[[42,18],19],[-1,-1,[]],[-1,-1,[]],[41,[[1,[42,4]]]],0,[[41,42],14],[-1,-2,[],[]],[-1,-2,[],[]],[41,[[11,[4]]]],[[],41],0,0,[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,1],[[],[[1,[42,4]]]],[[],3],0,[[2,2],[[5,[1,4]]]]],"c":[],"p":[[15,"tuple"],[15,"str"],[15,"bool"],[3,"String",336],[4,"Result",337],[3,"CACHE",10],[3,"Cache",44],[3,"Mutex",338],[3,"CacheKey",10],[3,"Row",218],[3,"Vec",339],[3,"TypeId",340],[4,"Option",341],[15,"usize"],[3,"TimeCache",44],[3,"Config",79],[3,"CONFIG",79],[3,"Formatter",342],[6,"Result",342],[4,"ConfigError",79],[4,"Value",343],[3,"Map",344],[3,"Bunch",193],[3,"TcpStream",345],[3,"CLIENTS",141],[3,"Clients",141],[3,"RequestHeaders",172],[8,"Deserializer",346],[8,"Serializer",347],[15,"u64"],[3,"MessageDescriptor",348],[3,"FileDescriptor",349],[3,"FileDescriptorProto",350],[3,"GeneratedMessageDescriptorData",351],[3,"CodedInputStream",352],[6,"Result",353],[3,"Error",353],[3,"SpecialFields",354],[3,"CodedOutputStream",355],[3,"POOL",279],[3,"TxPool",298],[3,"TX",298]],"b":[[229,"impl-Default-for-%26Row"],[230,"impl-Default-for-Row"],[238,"impl-Debug-for-Row"],[239,"impl-Display-for-Row"],[253,"impl-Message-for-Row"],[254,"impl-Row"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
